{"version":3,"sources":["components/section-layout/SectionLayout.tsx","components/section-title/SectionTitle.tsx","components/centered-section-item/CenteredGrid.tsx","components/list/EmptyList.tsx","containers/tasks/TasksList.tsx"],"names":["SectionLayout","props","children","rest","Grid","container","direction","css","width","minHeight","displayName","SectionTitle","title","item","height","boxShadow","Paper","square","display","alignItems","theme","paddingLeft","spacing","paddingRight","xs","Typography","variant","component","CenteredGrid","flexDirection","justifyContent","EmptyList","button","justify","alignContent","marginBottom","align","color","colors","black","fontWeight","fontSize","xLarge","secondary","larger","tabs","value","ETaskStatus","IN_PROGRESS","replace","label","ON_CHECK","EXPIRED","DRAFT","COMPLETED","columns","key","sortable","TasksList","tab","context","useContext","AppContext","useState","dialogOpen","setDialogOpen","tasks","setTasks","Map","selectedTasks","setSelectedTasks","searchQuery","setSearchQuery","total","setTotal","selectedRegion","setSelectedRegion","selectedCity","setSelectedCity","marketplaceRegions","setMarketplaceRegions","regionCities","setRegionCities","page","setPage","order","setOrder","orderBy","setOrderBy","fetchRegionsAndUpdateState","useCallback","getAllRegions","courier","then","response","regions","catch","console","error","fetchCitiesAndUpdateState","region","getCitiesForRegion","cities","clearSelectedTasks","clear","transformTaskDateToFriendly","task","selected","createdAt","getFriendlyDate","Date","updatedAt","deadline","fetchTasksAndUpdateState","sort","sortBy","city","upperCaseSort","toUpperCase","getTasksExtended","getTaskStatusByTab","map","all","prevTab","useRef","useEffect","current","prevTaskRegion","redirect","to","setRedirect","onRowSelectToggleCallback","row","_","isObject","has","id","get","set","delete","taskIndex","findIndex","setTaskToOnCheck","a","updateTask","Number","status","onBulkRejectClickCallback","tasksToUpdate","values","some","Promise","finally","onDialogClose","setTaskToInProgress","onBulkCompleteClickCallback","includes","onSelectToggleCallback","nextTasks","forEach","updateTaskListDebounced","debounce","onSearchQueryChangeCallback","event","target","onRequestSortCallback","onRegionChangeCallback","onCityChangeCallback","empty","open","onClose","onSuccess","noThrow","hidden","Link","scheme","margin","paper","padding","placeholder","fullWidth","onChange","radius","borderRadius","background","white","border","lightGray","transition","cursor","primary","div","input","placeholderDisabled","marginLeft","selectable","data","onRowClick","onRowSelectToggle","onSelectToggle","onRequestSort","onChangePage","nextPage","onClick"],"mappings":"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","file":"static/js/6.930995f0.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const SectionLayout: React.FC<React.ComponentProps<typeof Grid>> = props => {\n    const { children, ...rest } = props;\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            css={{\n                width: \"100%\",\n                minHeight: \"100vh\",\n            }}\n            {...rest}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nSectionLayout.displayName = \"SectionLayout\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport * as React from \"react\";\n\ninterface ISectionTitleProps {\n    title: string;\n}\n\nexport const SectionTitle: React.FC<ISectionTitleProps> = ({ title, children }) => {\n    return (\n        <Grid\n            item\n            css={{\n                height: \"var(--section-title-height)\",\n                boxShadow: \"0 6px 20px rgba(220, 227, 235, 0.3)\",\n            }}\n        >\n            <Paper\n                square={true}\n                css={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    boxShadow: \"none !important\",\n                }}\n            >\n                <Grid\n                    container\n                    css={theme => ({\n                        paddingLeft: theme.spacing(4),\n                        paddingRight: theme.spacing(4),\n                    })}\n                >\n                    <Grid item xs>\n                        <Typography variant=\"h4\" component=\"div\">\n                            <span>{title}</span>\n                        </Typography>\n                    </Grid>\n                    {children}\n                </Grid>\n            </Paper>\n        </Grid>\n    );\n};\n\nSectionTitle.displayName = \"SectionTitle\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const CenteredGrid: React.FC<React.ComponentProps<typeof Grid>> = props => {\n    const { children, ...rest } = props;\n\n    return (\n        <Grid\n            item\n            xs\n            css={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n            {...rest}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nCenteredGrid.displayName = \"CenteredSectionItem\";\n","/** @jsx jsx */\n\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { jsx } from \"@emotion/core\";\nimport { CenteredGrid } from \"components/centered-section-item\";\nimport * as React from \"react\";\n\ninterface IEmptyListProps {\n    title: string;\n    button?: React.ReactNode;\n}\n\nexport const EmptyList: React.FC<IEmptyListProps> = ({ title, button, children }) => {\n    return (\n        <CenteredGrid>\n            <Grid container justify=\"center\" alignContent=\"center\" direction=\"column\">\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.black,\n                            fontWeight: 500,\n                            fontSize: theme.fontSize.xLarge,\n                        })}\n                    >\n                        <span>{title}</span>\n                    </Typography>\n                </Grid>\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.secondary,\n                            fontSize: theme.colors.larger,\n                        })}\n                    >\n                        {children}\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Grid container justify=\"center\" alignContent=\"center\">\n                        <Grid item>{button}</Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </CenteredGrid>\n    );\n};\n\nEmptyList.displayName = \"EmptyList\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport {\n    Button,\n    Dialog,\n    IColumn,\n    InputField,\n    ITab,\n    SelectField,\n    Table,\n    TabsWrapper,\n} from \"@magnit/components\";\nimport { ETaskStatus } from \"@magnit/entities\";\nimport { AddIcon, ReturnIcon, SendIcon } from \"@magnit/icons\";\nimport { getFriendlyDate } from \"@magnit/services\";\nimport { Grid, MenuItem, Paper, Typography } from \"@material-ui/core\";\nimport { Link, Redirect, RouteComponentProps } from \"@reach/router\";\nimport { EmptyList } from \"components/list\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { AppContext } from \"context\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport {\n    getAllRegions,\n    getCitiesForRegion,\n    getTasksExtended,\n    IExtendedTask,\n    TExtendedTaskSortKeys,\n    updateTask,\n} from \"services/api\";\n\nconst tabs: ITab[] = [\n    { value: ETaskStatus.IN_PROGRESS.replace(\"_\", \"-\"), label: \"В работе\" },\n    { value: ETaskStatus.ON_CHECK.replace(\"_\", \"-\"), label: \"На проверке\" },\n    { value: ETaskStatus.EXPIRED, label: \"Просроченные\" },\n    { value: ETaskStatus.DRAFT, label: \"Черновики\" },\n    { value: ETaskStatus.COMPLETED, label: \"Завершенные\" },\n];\n\nconst columns: IColumn[] = [\n    { key: \"title\", label: \"Название задания\", sortable: true },\n    { key: \"region\", label: \"Регион\", sortable: true },\n    { key: \"city\", label: \"Филиал\", sortable: true },\n    { key: \"format\", label: \"Формат\", sortable: true },\n    { key: \"stageTitle\", label: \"Этап\", sortable: true },\n    { key: \"deadline\", label: \"Срок выполнения\", sortable: true },\n];\n\ntype TRouteProps = { \"*\": string };\n\ntype TTask = IExtendedTask & { selected: boolean };\n\ninterface IUpdateTaskListOptions {\n    sort?: \"asc\" | \"desc\";\n    sortBy?: TExtendedTaskSortKeys;\n    title?: string;\n    region?: string;\n    city?: string;\n}\n\ntype TSelectChangeEvent = React.ChangeEvent<{ name?: string; value: unknown }>;\n\nexport type ITaskListProps = RouteComponentProps<TRouteProps>;\n\nconst TasksList: React.FC<ITaskListProps> = props => {\n    const tab = props[\"*\"]!;\n\n    const context = useContext(AppContext);\n\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    // set task on click to redirect ot it\n    const [tasks, setTasks] = useState<TTask[]>([]);\n\n    // selection\n    const [selectedTasks, setSelectedTasks] = useState<Map<number, TTask>>(new Map());\n\n    // full text search\n    const [searchQuery, setSearchQuery] = useState(\"\");\n\n    // total count of tasks\n    const [total, setTotal] = useState(0);\n\n    // choose region + city selects\n    const [selectedRegion, setSelectedRegion] = useState<string>(\"\");\n    const [selectedCity, setSelectedCity] = useState<string>(\"\");\n    const [marketplaceRegions, setMarketplaceRegions] = useState<string[]>([]);\n    const [regionCities, setRegionCities] = useState<string[]>([]);\n\n    // table\n    const [page, setPage] = useState(0);\n    const [order, setOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n    const [orderBy, setOrderBy] = useState<TExtendedTaskSortKeys>(\"\");\n\n    const fetchRegionsAndUpdateState = useCallback(() => {\n        getAllRegions(context.courier)\n            .then(response => setMarketplaceRegions(response.regions))\n            .catch(console.error);\n    }, [context.courier]);\n\n    const fetchCitiesAndUpdateState = useCallback(\n        (region: string) => {\n            getCitiesForRegion(context.courier, region)\n                .then(response => setRegionCities(response.cities))\n                .catch(console.error);\n        },\n        [context.courier],\n    );\n\n    const clearSelectedTasks = useCallback(() => {\n        selectedTasks.clear();\n        setSelectedTasks(new Map(selectedTasks));\n    }, [selectedTasks]);\n\n    const transformTaskDateToFriendly = useCallback(\n        (task: IExtendedTask) => ({\n            ...task,\n            selected: false,\n            createdAt: getFriendlyDate(new Date(task.createdAt!), true),\n            updatedAt: getFriendlyDate(new Date(task.updatedAt!), true),\n            deadline: getFriendlyDate(new Date(task.updatedAt!), true),\n        }),\n        [],\n    );\n\n    const fetchTasksAndUpdateState = useCallback(\n        ({ sort, sortBy, title, region, city }: IUpdateTaskListOptions = {}) => {\n            clearSelectedTasks();\n            // get task by current status\n            // also apply queries\n            const upperCaseSort = (sort || \"ASC\").toUpperCase() as \"ASC\" | \"DESC\";\n            getTasksExtended(\n                context.courier,\n                getTaskStatusByTab(tab),\n                upperCaseSort,\n                sortBy,\n                title,\n                region,\n                city,\n            )\n                .then(response => {\n                    setTasks(response.tasks.map(transformTaskDateToFriendly));\n                    setTotal(response.all);\n                })\n                .catch(console.error);\n        },\n        [clearSelectedTasks, context.courier, transformTaskDateToFriendly, tab],\n    );\n\n    const prevTab = useRef<string | null>(null);\n    useEffect(() => {\n        if (prevTab.current !== tab) {\n            prevTab.current = tab;\n            // reset table\n            setPage(0);\n            setOrder(\"asc\");\n            setOrderBy(\"\");\n            // reset search query\n            setSearchQuery(\"\");\n            // reset selected state\n            setSelectedRegion(\"\");\n            setSelectedCity(\"\");\n            // fetch tasks\n            fetchTasksAndUpdateState();\n            // fetch marketplaces\n            fetchRegionsAndUpdateState();\n        }\n    }, [tab, fetchTasksAndUpdateState, fetchRegionsAndUpdateState]);\n\n    const prevTaskRegion = useRef(selectedRegion);\n    useEffect(() => {\n        if (!(selectedRegion && prevTaskRegion.current !== selectedRegion)) {\n            return;\n        }\n        fetchCitiesAndUpdateState(selectedRegion);\n    }, [fetchCitiesAndUpdateState, selectedRegion]);\n\n    const [redirect, setRedirect] = useState({ redirect: false, to: \"\" });\n\n    function onRowClick(row: object) {\n        if (!_.isObject(row) || !_.has(row, \"id\")) {\n            return;\n        }\n        setRedirect({ redirect: true, to: _.get(row, \"id\") });\n    }\n\n    const onRowSelectToggleCallback = useCallback(\n        (row: object, selected: boolean) => {\n            if (!_.isObject(row) || !_.has(row, \"id\")) {\n                return;\n            }\n            // select or un-select tasks for rejecting\n            const id = _.get(row, \"id\")!;\n            if (selected) {\n                selectedTasks.set(id, row as TTask);\n            } else {\n                selectedTasks.delete(id);\n            }\n            setSelectedTasks(new Map(selectedTasks));\n            // update actual task\n            const taskIndex = tasks.findIndex(task => task.id === id);\n            if (taskIndex !== -1) {\n                tasks[taskIndex].selected = selected;\n                setTasks([...tasks]);\n            }\n        },\n        [selectedTasks, tasks],\n    );\n\n    const setTaskToOnCheck = useCallback(\n        async (task: TTask) =>\n            updateTask(context.courier, Number(task.id), { status: ETaskStatus.ON_CHECK }),\n        [context.courier],\n    );\n\n    const onBulkRejectClickCallback = useCallback(() => {\n        const tasksToUpdate = [...selectedTasks.values()];\n\n        const isNotInProgress = (task: TTask) => task.status !== ETaskStatus.IN_PROGRESS;\n\n        // allow reject only tasks in IN_PROGRESS state\n        if (tasksToUpdate.some(isNotInProgress)) {\n            return;\n        }\n\n        // TODO: perform one request\n        // https://github.com/DavidArutiunian/magnit/issues/88\n        Promise.all(tasksToUpdate.map(setTaskToOnCheck))\n            .then(() => fetchTasksAndUpdateState())\n            .catch(console.error)\n            .finally(onDialogClose);\n    }, [selectedTasks, setTaskToOnCheck, fetchTasksAndUpdateState]);\n\n    const setTaskToInProgress = useCallback(\n        async (task: TTask) =>\n            updateTask(context.courier, Number(task.id), { status: ETaskStatus.IN_PROGRESS }),\n        [context.courier],\n    );\n\n    const onBulkCompleteClickCallback = useCallback(() => {\n        const tasksToUpdate = [...selectedTasks.values()];\n\n        const isNotDraftOrOnCheck = (task: TTask) =>\n            ![ETaskStatus.DRAFT, ETaskStatus.ON_CHECK].includes(task.status);\n\n        // allow complete only tasks in DRAFT & ON_CHECK states\n        if (tasksToUpdate.some(isNotDraftOrOnCheck)) {\n            return;\n        }\n\n        // TODO: perform one request\n        // https://github.com/DavidArutiunian/magnit/issues/88\n        Promise.all(tasksToUpdate.map(setTaskToInProgress))\n            .then(() => fetchTasksAndUpdateState())\n            .then(() => clearSelectedTasks())\n            .catch(console.error);\n    }, [clearSelectedTasks, selectedTasks, setTaskToInProgress, fetchTasksAndUpdateState]);\n\n    const onSelectToggleCallback = useCallback(\n        (selected: boolean) => {\n            const nextTasks = tasks.map(task => ({ ...task, selected }));\n            setTasks(nextTasks);\n            if (selected) {\n                nextTasks.forEach(task => task.id && selectedTasks.set(task.id, task));\n                setSelectedTasks(new Map(selectedTasks));\n            } else {\n                clearSelectedTasks();\n            }\n        },\n        [clearSelectedTasks, selectedTasks, tasks],\n    );\n\n    const updateTaskListDebounced = _.debounce(fetchTasksAndUpdateState, 150);\n\n    const onSearchQueryChangeCallback = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            const value = event.target.value;\n            setSearchQuery(value);\n            updateTaskListDebounced({\n                title: value,\n                region: selectedRegion,\n                city: selectedCity,\n                sortBy: orderBy,\n                sort: order,\n            });\n        },\n        [order, orderBy, selectedCity, selectedRegion, updateTaskListDebounced],\n    );\n\n    const onRequestSortCallback = useCallback(\n        (sort: \"asc\" | \"desc\", sortBy: TExtendedTaskSortKeys) => {\n            setOrder(sort);\n            setOrderBy(sortBy);\n            fetchTasksAndUpdateState({\n                title: searchQuery,\n                region: selectedRegion,\n                city: selectedCity,\n                sortBy,\n                sort,\n            });\n        },\n        [fetchTasksAndUpdateState, searchQuery, selectedCity, selectedRegion],\n    );\n\n    function onDialogOpen() {\n        setDialogOpen(true);\n    }\n\n    function onDialogClose() {\n        setDialogOpen(false);\n    }\n\n    const onRegionChangeCallback = useCallback(\n        (event: TSelectChangeEvent) => {\n            const value = event.target.value as string;\n            setSelectedRegion(value);\n            setSelectedCity(\"\");\n            // empty cities if selected nothing\n            if (!value) {\n                setRegionCities([]);\n            }\n            updateTaskListDebounced({\n                title: searchQuery,\n                region: value,\n                sort: order,\n                sortBy: orderBy,\n            });\n        },\n        [order, orderBy, searchQuery, updateTaskListDebounced],\n    );\n\n    const onCityChangeCallback = useCallback(\n        (event: TSelectChangeEvent) => {\n            const value = event.target.value as string;\n            setSelectedCity(value);\n            updateTaskListDebounced({\n                title: searchQuery,\n                region: selectedRegion,\n                city: value,\n                sort: order,\n                sortBy: orderBy,\n            });\n        },\n        [order, orderBy, searchQuery, selectedRegion, updateTaskListDebounced],\n    );\n\n    function onChangePage(nextPage: number) {\n        setPage(nextPage);\n    }\n\n    const empty = !total;\n\n    return (\n        <SectionLayout>\n            <Dialog open={dialogOpen} onClose={onDialogClose} onSuccess={onBulkRejectClickCallback}>\n                Вы действительно хотите отозвать задания?\n            </Dialog>\n            {redirect.redirect && <Redirect to={`tasks/view/${redirect.to}`} noThrow />}\n            <SectionTitle title=\"Список заданий\">\n                {process.env.REACT_APP_ALLOW_CREATE_TASK && (\n                    <Grid item hidden={empty}>\n                        <Button component={Link} to=\"create\" variant=\"contained\" scheme=\"blue\">\n                            <AddIcon />\n                            <Typography>Создать задание</Typography>\n                        </Button>\n                    </Grid>\n                )}\n            </SectionTitle>\n            {empty && (\n                <EmptyList\n                    title=\"Заданий нет\"\n                    button={\n                        <React.Fragment>\n                            {process.env.REACT_APP_ALLOW_CREATE_TASK && (\n                                <Grid item>\n                                    <Button\n                                        component={Link}\n                                        to=\"create\"\n                                        variant=\"contained\"\n                                        scheme=\"blue\"\n                                    >\n                                        <AddIcon />\n                                        <Typography>Создать задание</Typography>\n                                    </Button>\n                                </Grid>\n                            )}\n                        </React.Fragment>\n                    }\n                >\n                    {process.env.REACT_APP_ALLOW_CREATE_TASK && (\n                        <React.Fragment>\n                            <div>Для создания задания нажмите кнопку</div>\n                            <div>Создать задание</div>\n                        </React.Fragment>\n                    )}\n                </EmptyList>\n            )}\n            {!empty && (\n                <Paper\n                    square={true}\n                    css={({ spacing, boxShadow }) => ({\n                        margin: spacing(3),\n                        boxShadow: boxShadow.paper,\n                    })}\n                >\n                    <Grid container direction=\"row\" css={theme => ({ padding: theme.spacing(2) })}>\n                        <Grid item xs={12}>\n                            <TabsWrapper tabs={tabs}>\n                                <Grid\n                                    container\n                                    direction=\"column\"\n                                    css={theme => ({ padding: theme.spacing(4) })}\n                                >\n                                    <Grid item xs={12}>\n                                        <Grid container direction=\"row\" spacing={2}>\n                                            <Grid item xs>\n                                                <InputField\n                                                    placeholder=\"Поиск ...\"\n                                                    fullWidth\n                                                    value={searchQuery}\n                                                    onChange={onSearchQueryChangeCallback}\n                                                    css={({ spacing, radius, colors }) => ({\n                                                        borderRadius: radius(5),\n                                                        background: colors.white,\n                                                        border: `1px solid ${colors.lightGray}`,\n                                                        transition: \"border 0.25s ease-in-out\",\n                                                        cursor: \"pointer\",\n                                                        \":hover, :active\": {\n                                                            border: `1px solid ${colors.primary}`,\n                                                        },\n                                                        div: {\n                                                            \":before, :after\": {\n                                                                border: \"none !important\",\n                                                            },\n                                                        },\n                                                        input: {\n                                                            padding: `${spacing(2)} ${spacing(4)}`,\n                                                        },\n                                                    })}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={2}>\n                                                <SelectField\n                                                    placeholderDisabled={false}\n                                                    value={selectedRegion}\n                                                    placeholder=\"Выберите регион\"\n                                                    fullWidth\n                                                    onChange={onRegionChangeCallback}\n                                                >\n                                                    {(marketplaceRegions || []).map(region => (\n                                                        <MenuItem key={region} value={region}>\n                                                            {region}\n                                                        </MenuItem>\n                                                    ))}\n                                                </SelectField>\n                                            </Grid>\n                                            <Grid item xs={2}>\n                                                <SelectField\n                                                    placeholderDisabled={false}\n                                                    value={selectedCity}\n                                                    placeholder=\"Выберите филиал\"\n                                                    fullWidth\n                                                    onChange={onCityChangeCallback}\n                                                >\n                                                    {(regionCities || []).map(city => (\n                                                        <MenuItem key={city} value={city}>\n                                                            {city}\n                                                        </MenuItem>\n                                                    ))}\n                                                </SelectField>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid\n                                        xs={12}\n                                        item\n                                        css={theme => ({\n                                            padding: theme.spacing(3),\n                                            paddingLeft: 0,\n                                            paddingRight: 0,\n                                        })}\n                                    >\n                                        <Table\n                                            css={theme => ({\n                                                marginLeft: theme.spacing(-2),\n                                                width: `calc(100% + ${theme.spacing(4)})`,\n                                            })}\n                                            page={page}\n                                            order={order}\n                                            orderBy={orderBy}\n                                            selectable\n                                            columns={columns}\n                                            data={tasks}\n                                            onRowClick={onRowClick}\n                                            onRowSelectToggle={onRowSelectToggleCallback}\n                                            onSelectToggle={onSelectToggleCallback}\n                                            onRequestSort={onRequestSortCallback}\n                                            onChangePage={onChangePage}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        {(tab === ETaskStatus.IN_PROGRESS.replace(\"_\", \"-\") ||\n                                            !tab) && (\n                                            <Button\n                                                variant=\"contained\"\n                                                scheme=\"blue\"\n                                                onClick={onDialogOpen}\n                                            >\n                                                <ReturnIcon />\n                                                <Typography>Отозвать</Typography>\n                                            </Button>\n                                        )}\n                                        {tab &&\n                                            tab !== ETaskStatus.IN_PROGRESS.replace(\"_\", \"-\") &&\n                                            tab !== ETaskStatus.COMPLETED && (\n                                                <Button\n                                                    variant=\"contained\"\n                                                    scheme=\"blue\"\n                                                    onClick={onBulkCompleteClickCallback}\n                                                >\n                                                    <SendIcon />\n                                                    <Typography>Отправить</Typography>\n                                                </Button>\n                                            )}\n                                    </Grid>\n                                </Grid>\n                            </TabsWrapper>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            )}\n        </SectionLayout>\n    );\n};\n\nTasksList.displayName = \"TasksList\";\n\nexport default TasksList;\n\nfunction getTaskStatusByTab(tab?: string): ETaskStatus {\n    if (!tab) {\n        return ETaskStatus.IN_PROGRESS;\n    }\n    return ((tab as unknown) as string).replace(\"-\", \"_\") as ETaskStatus;\n}\n"],"sourceRoot":""}