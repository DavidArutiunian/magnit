{"version":3,"sources":["containers/tasks/CreateTask.tsx"],"names":["CreateTask","props","users","username","context","useContext","AppContext","useState","templates","setTemplates","owner","find","user","id","title","stages","marketplace","address","city","format","region","status","ETaskStatus","DRAFT","idOwner","task","setTask","error","setError","open","message","snackbar","setSnackbar","marketplaceRegions","setMarketplaceRegions","regionCities","setRegionCities","cityFormats","setCityFormats","formatAddresses","setFormatAddresses","useEffect","getTemplates","courier","then","response","catch","console","getAllRegions","regions","prevTaskRegion","useRef","current","getCitiesForRegion","cities","prevTaskCity","getFormatsForCity","formats","prevTaskFormat","getAddressesForFormat","addresses","item","variant","scheme","css","theme","margin","spacing","onClick","createTask","a","addTemplateAssignment","Number","taskId","map","_","toNumber","disabled","maxWidth","maxTemplateWidth","position","transition","onTaskChange","value","has","onClose","event","reason","setTimeout"],"mappings":"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","file":"static/js/14.ae47b426.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button } from \"@magnit/components\";\nimport { ETaskStatus, ITask, ITemplate, IUser } from \"@magnit/entities\";\nimport { SendIcon } from \"@magnit/icons\";\nimport { TaskEditor } from \"@magnit/task-editor\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Snackbar } from \"components/snackbar\";\nimport { AppContext } from \"context\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport {\n    addTemplateAssignment,\n    createTask,\n    getAddressesForFormat,\n    getAllRegions,\n    getCitiesForRegion,\n    getFormatsForCity,\n    getTemplates,\n} from \"services/api\";\n\nexport interface ICreateTaskProps extends RouteComponentProps {\n    username: string;\n    users: IUser[];\n}\n\nconst CreateTask: React.FC<ICreateTaskProps> = props => {\n    const { users, username } = props;\n\n    const context = useContext(AppContext);\n\n    // all templates\n    const [templates, setTemplates] = useState<ITemplate[]>([]);\n\n    // task state\n    const owner = users.find(user => user.username === username);\n    const [task, setTask] = useState<ITask>({\n        id: 0,\n        title: \"\",\n        templates: [],\n        stages: [],\n        marketplace: {\n            address: \"\",\n            city: \"\",\n            format: \"\",\n            region: \"\",\n        },\n        status: ETaskStatus.DRAFT,\n        idOwner: owner ? owner.id : \"\",\n    });\n\n    // snackbar\n    // deprecated, should be used within context\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: \"\",\n    }); // open/close snackbar\n\n    // marketplace\n    const [marketplaceRegions, setMarketplaceRegions] = useState<string[]>([]);\n    const [regionCities, setRegionCities] = useState<string[]>([]);\n    const [cityFormats, setCityFormats] = useState<string[]>([]);\n    const [formatAddresses, setFormatAddresses] = useState<string[]>([]);\n\n    useEffect(() => {\n        getTemplates(context.courier)\n            .then(response => setTemplates([...response.templates]))\n            .catch(console.error);\n    }, [context.courier]);\n\n    useEffect(() => {\n        // only draft mode contains marketplace selects\n        if (task.status !== ETaskStatus.DRAFT) {\n            return;\n        }\n        getAllRegions(context.courier)\n            .then(response => setMarketplaceRegions(response.regions))\n            .catch(console.error);\n    }, [context.courier, task.status]);\n\n    // get all regions initially\n    const region = (task.marketplace || {}).region;\n    const prevTaskRegion = useRef(region);\n    useEffect(() => {\n        if (region && prevTaskRegion.current !== region) {\n            getCitiesForRegion(context.courier, region)\n                .then(response => setRegionCities(response.cities))\n                .catch(console.error);\n        }\n    }, [context.courier, region]);\n\n    // fetching all available formats for city\n    // if task marketplace city has changed\n    const city = (task.marketplace || {}).city;\n    const prevTaskCity = useRef(city);\n    useEffect(() => {\n        if (city && region && prevTaskCity.current !== city) {\n            getFormatsForCity(context.courier, region, city)\n                .then(response => setCityFormats(response.formats))\n                .catch(console.error);\n        }\n    }, [context.courier, region, city]);\n\n    // fetching all available addresses for format\n    // if task marketplace format has changed\n    const format = (task.marketplace || {}).format;\n    const prevTaskFormat = useRef(format);\n    useEffect(() => {\n        if (city && region && format && prevTaskFormat.current !== format) {\n            getAddressesForFormat(context.courier, region, city, format)\n                .then(response => setFormatAddresses(response.addresses))\n                .catch(console.error);\n        }\n    }, [context.courier, format, region, city]);\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setSnackbar({ open: false, message: \"\" });\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTaskChange(task: Partial<ITask>): void {\n        const isValidTask = (value: object): value is ITask =>\n            _.has(value, \"id\") && _.has(value, \"title\") && _.has(value, \"templates\");\n\n        if (isValidTask(task)) {\n            setTask({ ...task });\n        }\n    }\n\n    function onTaskSave(): void {\n        createTask(context.courier, task)\n            .then(async response =>\n                addTemplateAssignment(\n                    context.courier,\n                    Number(response.taskId),\n                    (task.templates || []).map(_.toNumber),\n                ),\n            )\n            .then(() => setSnackbar({ open: true, message: \"Задание успешно сохранено!\" }))\n            .catch(() => {\n                setSnackbar({ open: true, message: \"Ошибка сохранения задания!\" });\n                setError(true);\n            });\n    }\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Создание задания\">\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        scheme=\"blue\"\n                        css={theme => ({ margin: `0 ${theme.spacing(1)}` })}\n                        onClick={onTaskSave}\n                        disabled={snackbar.open}\n                    >\n                        <SendIcon />\n                        <Typography>Отправить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    transition: \"opacity 0.3s ease-in-out\",\n                })}\n            >\n                <TaskEditor<ITask>\n                    users={users}\n                    variant=\"create\"\n                    task={task}\n                    templates={templates}\n                    regions={marketplaceRegions}\n                    cities={regionCities}\n                    formats={cityFormats}\n                    addresses={formatAddresses}\n                    onTaskChange={onTaskChange}\n                />\n            </Grid>\n            <Snackbar\n                open={snackbar.open}\n                error={error}\n                onClose={onSnackbarClose}\n                message={snackbar.message}\n            />\n        </SectionLayout>\n    );\n};\n\nexport default CreateTask;\n"],"sourceRoot":""}