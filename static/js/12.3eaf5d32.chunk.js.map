{"version":3,"sources":["components/section-layout/SectionLayout.tsx","components/section-title/SectionTitle.tsx","containers/templates/EditTemplate.tsx"],"names":["SectionLayout","props","children","rest","Grid","container","direction","css","width","minHeight","displayName","SectionTitle","title","item","height","boxShadow","Paper","square","display","alignItems","theme","paddingLeft","spacing","paddingRight","xs","Typography","variant","component","EditTemplate","templateId","context","useContext","AppContext","useState","id","sections","description","type","ETemplateType","LIGHT","template","setTemplate","error","setError","open","message","snackbar","setSnackbar","file","a","uploadFile","courier","then","response","filename","process","deleteFile","useEffect","getTemplate","catch","console","scheme","onClick","updateTemplate","disabled","maxWidth","maxTemplateWidth","margin","position","transition","background","colors","main","onChange","onAddAsset","onDeleteAsset","onClose","event","reason","setTimeout"],"mappings":"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","file":"static/js/12.3eaf5d32.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const SectionLayout: React.FC<React.ComponentProps<typeof Grid>> = props => {\n    const { children, ...rest } = props;\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            css={{\n                width: \"100%\",\n                minHeight: \"100vh\",\n            }}\n            {...rest}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nSectionLayout.displayName = \"SectionLayout\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport * as React from \"react\";\n\ninterface ISectionTitleProps {\n    title: string;\n}\n\nexport const SectionTitle: React.FC<ISectionTitleProps> = ({ title, children }) => {\n    return (\n        <Grid\n            item\n            css={{\n                height: \"var(--section-title-height)\",\n                boxShadow: \"0 6px 20px rgba(220, 227, 235, 0.3)\",\n            }}\n        >\n            <Paper\n                square={true}\n                css={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    boxShadow: \"none !important\",\n                }}\n            >\n                <Grid\n                    container\n                    css={theme => ({\n                        paddingLeft: theme.spacing(4),\n                        paddingRight: theme.spacing(4),\n                    })}\n                >\n                    <Grid item xs>\n                        <Typography variant=\"h4\" component=\"div\">\n                            <span>{title}</span>\n                        </Typography>\n                    </Grid>\n                    {children}\n                </Grid>\n            </Paper>\n        </Grid>\n    );\n};\n\nSectionTitle.displayName = \"SectionTitle\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button } from \"@magnit/components\";\nimport { ETemplateType, ITemplate } from \"@magnit/entities\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { TemplateEditor } from \"@magnit/template-editor\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { Snackbar } from \"components/snackbar\";\nimport { AppContext } from \"context\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { deleteFile, getTemplate, updateTemplate, uploadFile } from \"services/api\";\n\nexport interface IEditTemplateProps {\n    templateId: number;\n}\n\nconst EditTemplate: React.FC<IEditTemplateProps> = ({ templateId }) => {\n    const context = useContext(AppContext);\n    const [template, setTemplate] = useState<ITemplate>({\n        id: 0,\n        sections: [],\n        title: \"\",\n        description: \"\",\n        type: ETemplateType.LIGHT,\n    });\n    const [error, setError] = useState(false); // success/error snackbar state\n    const [snackbar, setSnackbar] = useState({\n        open: false,\n        message: \"\",\n    }); // open/close snackbar\n\n    useEffect(() => {\n        getTemplate(context.courier, templateId)\n            .then(response => setTemplate(response.template))\n            .catch(console.error);\n    }, [context.courier, templateId]);\n\n    function onTemplateChange(template: ITemplate) {\n        setTemplate({ ...template });\n    }\n\n    function onSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        setSnackbar({ open: false, message: \"\" });\n        // wait till animation ends\n        setTimeout(() => setError(false), 100);\n    }\n\n    function onTemplateSave() {\n        updateTemplate(context.courier, templateId, template)\n            .then(() => setSnackbar({ open: true, message: \"Шаблон успешно обновлён!\" }))\n            .catch(() => {\n                setSnackbar({ open: true, message: \"Ошибка обновления шаблона!\" });\n                setError(true);\n            });\n    }\n\n    async function onAddAsset(file: File) {\n        return uploadFile(context.courier, file).then(response => ({\n            ...response,\n            filename: `${process.env.REACT_APP_BACKEND_URL}/${response.filename}`,\n        }));\n    }\n\n    async function onDeleteAsset(filename: string) {\n        return deleteFile(context.courier, filename);\n    }\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"Редактирование шаблона\">\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        scheme=\"blue\"\n                        onClick={onTemplateSave}\n                        disabled={snackbar.open}\n                    >\n                        <CheckIcon />\n                        <Typography>Обновить</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                    transition: \"opacity 0.3s ease-in-out\",\n                })}\n            >\n                <TemplateEditor\n                    template={template}\n                    css={theme => ({ background: theme.colors.main })}\n                    onChange={onTemplateChange}\n                    onAddAsset={onAddAsset}\n                    onDeleteAsset={onDeleteAsset}\n                />\n            </Grid>\n            <Snackbar\n                open={snackbar.open}\n                error={error}\n                onClose={onSnackbarClose}\n                message={snackbar.message}\n            />\n        </SectionLayout>\n    );\n};\n\nexport default EditTemplate;\n"],"sourceRoot":""}