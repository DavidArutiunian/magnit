{"version":3,"sources":["components/section-layout/SectionLayout.tsx","components/section-title/SectionTitle.tsx","components/centered-section-item/CenteredGrid.tsx","components/list/EmptyList.tsx","containers/templates/TemplateList.tsx"],"names":["SectionLayout","props","children","rest","Grid","container","direction","css","width","minHeight","displayName","SectionTitle","title","item","height","boxShadow","Paper","square","display","alignItems","theme","paddingLeft","spacing","paddingRight","xs","Typography","variant","component","CenteredGrid","flexDirection","justifyContent","EmptyList","button","justify","alignContent","marginBottom","align","color","colors","black","fontWeight","fontSize","xLarge","secondary","larger","columns","key","label","sortable","TemplateList","context","useContext","AppContext","useState","searchQuery","setSearchQuery","total","setTotal","rows","setRows","page","setPage","order","setOrder","orderBy","setOrderBy","redirect","to","setRedirect","fetchTemplatesAndSetState","useCallback","sort","sortBy","upperCaseSort","toUpperCase","getShortTemplates","courier","then","response","templates","map","template","createdAt","getFriendlyDate","Date","updatedAt","all","catch","console","error","useEffect","onDeleteTemplateCallback","id","deleteTemplate","setSnackbarState","open","message","setSnackbarError","renderMenuItems","row","onMenuClose","onClick","event","stopPropagation","updateTemplateListDebounced","_","debounce","onSearchQueryChangeCallback","value","target","onRequestSortCallback","empty","noThrow","hidden","Link","scheme","margin","paper","marginTop","padding","placeholder","fullWidth","onChange","radius","borderRadius","background","white","border","lightGray","transition","cursor","primary","div","input","onRequestSort","data","onRowClick","onChangePage","nextPage"],"mappings":"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","file":"static/js/7.8c7d1146.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const SectionLayout: React.FC<React.ComponentProps<typeof Grid>> = props => {\n    const { children, ...rest } = props;\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            css={{\n                width: \"100%\",\n                minHeight: \"100vh\",\n            }}\n            {...rest}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nSectionLayout.displayName = \"SectionLayout\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport * as React from \"react\";\n\ninterface ISectionTitleProps {\n    title: string;\n}\n\nexport const SectionTitle: React.FC<ISectionTitleProps> = ({ title, children }) => {\n    return (\n        <Grid\n            item\n            css={{\n                height: \"var(--section-title-height)\",\n                boxShadow: \"0 6px 20px rgba(220, 227, 235, 0.3)\",\n            }}\n        >\n            <Paper\n                square={true}\n                css={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    boxShadow: \"none !important\",\n                }}\n            >\n                <Grid\n                    container\n                    css={theme => ({\n                        paddingLeft: theme.spacing(4),\n                        paddingRight: theme.spacing(4),\n                    })}\n                >\n                    <Grid item xs>\n                        <Typography variant=\"h4\" component=\"div\">\n                            <span>{title}</span>\n                        </Typography>\n                    </Grid>\n                    {children}\n                </Grid>\n            </Paper>\n        </Grid>\n    );\n};\n\nSectionTitle.displayName = \"SectionTitle\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const CenteredGrid: React.FC<React.ComponentProps<typeof Grid>> = props => {\n    const { children, ...rest } = props;\n\n    return (\n        <Grid\n            item\n            xs\n            css={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n            {...rest}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nCenteredGrid.displayName = \"CenteredSectionItem\";\n","/** @jsx jsx */\n\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { jsx } from \"@emotion/core\";\nimport { CenteredGrid } from \"components/centered-section-item\";\nimport * as React from \"react\";\n\ninterface IEmptyListProps {\n    title: string;\n    button?: React.ReactNode;\n}\n\nexport const EmptyList: React.FC<IEmptyListProps> = ({ title, button, children }) => {\n    return (\n        <CenteredGrid>\n            <Grid container justify=\"center\" alignContent=\"center\" direction=\"column\">\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.black,\n                            fontWeight: 500,\n                            fontSize: theme.fontSize.xLarge,\n                        })}\n                    >\n                        <span>{title}</span>\n                    </Typography>\n                </Grid>\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.secondary,\n                            fontSize: theme.colors.larger,\n                        })}\n                    >\n                        {children}\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Grid container justify=\"center\" alignContent=\"center\">\n                        <Grid item>{button}</Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </CenteredGrid>\n    );\n};\n\nEmptyList.displayName = \"EmptyList\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Button, IColumn, InputField, ITableDataItem, Table } from \"@magnit/components\";\nimport { AddIcon } from \"@magnit/icons\";\nimport { getFriendlyDate } from \"@magnit/services\";\nimport { Grid, MenuItem, Paper, Typography } from \"@material-ui/core\";\nimport { Link, Redirect, RouteComponentProps } from \"@reach/router\";\nimport { EmptyList } from \"components/list\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { AppContext } from \"context\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n    deleteTemplate,\n    getShortTemplates,\n    TShortTemplate,\n    TShortTemplateSortKeys,\n} from \"services/api/templates\";\n\nconst columns: IColumn[] = [\n    { key: \"title\", label: \"Название шаблона\", sortable: true },\n    { key: \"description\", label: \"Описание\", sortable: true },\n    { key: \"createdAt\", label: \"Дата создания\", sortable: true },\n    { key: \"updatedAt\", label: \"Дата редактирования\", sortable: true },\n];\n\ninterface IUpdateTemplateListOptions {\n    sort?: \"asc\" | \"desc\";\n    sortBy?: TShortTemplateSortKeys;\n    title?: string;\n}\n\nexport type ITemplateListProps = RouteComponentProps;\n\nconst TemplateList: React.FC<ITemplateListProps> = () => {\n    const context = useContext(AppContext);\n\n    // full text search\n    const [searchQuery, setSearchQuery] = useState(\"\");\n\n    // table\n    const [total, setTotal] = useState(0);\n    const [rows, setRows] = useState<TShortTemplate[]>([]);\n    const [page, setPage] = useState(0);\n    const [order, setOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n    const [orderBy, setOrderBy] = useState<TShortTemplateSortKeys>(\"\");\n\n    // redirect to row\n    const [redirect, setRedirect] = useState({ redirect: false, to: \"\" });\n\n    const fetchTemplatesAndSetState = useCallback(\n        ({ title, sort, sortBy }: IUpdateTemplateListOptions = {}) => {\n            // filtered\n            const upperCaseSort = (sort || \"ASC\").toUpperCase() as \"ASC\" | \"DESC\";\n            getShortTemplates(context.courier, title, upperCaseSort, sortBy)\n                .then(response => {\n                    setRows(\n                        response.templates.map(template => ({\n                            ...template,\n                            createdAt: getFriendlyDate(new Date(template.createdAt!), true),\n                            updatedAt: getFriendlyDate(new Date(template.updatedAt!), true),\n                        })),\n                    );\n                    setTotal(response.all);\n                })\n                .catch(console.error);\n        },\n        [context.courier],\n    );\n\n    useEffect(() => {\n        // reset table\n        setPage(0);\n        setOrder(\"asc\");\n        setOrderBy(\"\");\n        // reset search query\n        setSearchQuery(\"\");\n        // fetch templates\n        fetchTemplatesAndSetState();\n    }, [context.courier, fetchTemplatesAndSetState]);\n\n    function onRowClick(row?: ITableDataItem) {\n        if (!row) {\n            return;\n        }\n        setRedirect({ redirect: true, to: row.id });\n    }\n\n    function onChangePage(nextPage: number) {\n        setPage(nextPage);\n    }\n\n    const onDeleteTemplateCallback = useCallback(\n        (id: number) => {\n            deleteTemplate(context.courier, id)\n                .then(() => {\n                    fetchTemplatesAndSetState();\n                    context.setSnackbarState({ open: true, message: \"Шаблон успешно удалён\" });\n                })\n                .catch(() => {\n                    context.setSnackbarError(true);\n                    context.setSnackbarState({ open: true, message: \"Не удалось удалить шаблон\" });\n                });\n        },\n        [context, fetchTemplatesAndSetState],\n    );\n\n    const renderMenuItems = useCallback(\n        (row: ITableDataItem, onMenuClose: () => void) => {\n            function onDeleteClick(event: React.MouseEvent<HTMLLIElement>) {\n                event.stopPropagation();\n                onDeleteTemplateCallback(row.id);\n                onMenuClose();\n            }\n\n            return [\n                <MenuItem key={row.id} onClick={onDeleteClick}>\n                    Удалить\n                </MenuItem>,\n            ];\n        },\n        [onDeleteTemplateCallback],\n    );\n\n    const updateTemplateListDebounced = _.debounce(fetchTemplatesAndSetState, 150);\n\n    const onSearchQueryChangeCallback = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            const value = event.target.value;\n            setSearchQuery(value);\n            updateTemplateListDebounced({\n                title: value,\n                sort: order,\n                sortBy: orderBy,\n            });\n        },\n        [order, orderBy, updateTemplateListDebounced],\n    );\n\n    const onRequestSortCallback = useCallback(\n        (sort: \"asc\" | \"desc\", sortBy: keyof TShortTemplate) => {\n            setOrder(sort);\n            setOrderBy(sortBy);\n            fetchTemplatesAndSetState({ title: searchQuery, sort, sortBy });\n        },\n        [fetchTemplatesAndSetState, searchQuery],\n    );\n\n    const empty = !total;\n\n    return (\n        <SectionLayout>\n            {redirect.redirect && <Redirect to={`templates/edit/${redirect.to}`} noThrow />}\n            <SectionTitle title=\"Список шаблонов\">\n                <Grid item hidden={empty}>\n                    <Button component={Link} to=\"create\" variant=\"contained\" scheme=\"blue\">\n                        <AddIcon />\n                        <Typography>Создать шаблон</Typography>\n                    </Button>\n                </Grid>\n            </SectionTitle>\n            {empty && (\n                <EmptyList\n                    title=\"Шаблонов нет\"\n                    button={\n                        <Button component={Link} to=\"create\" scheme=\"blue\">\n                            <AddIcon />\n                            <Typography>Создать шаблон</Typography>\n                        </Button>\n                    }\n                >\n                    <div>Для создания шаблона нажмите кнопку</div>\n                    <div>Создать шаблон</div>\n                </EmptyList>\n            )}\n            {!empty && (\n                <Paper\n                    square={true}\n                    css={({ spacing, boxShadow }) => ({\n                        margin: spacing(3),\n                        boxShadow: boxShadow.paper,\n                    })}\n                >\n                    <Grid\n                        container\n                        direction=\"row\"\n                        css={theme => ({ marginTop: theme.spacing(2) })}\n                    >\n                        <Grid\n                            container\n                            direction=\"column\"\n                            css={theme => ({ padding: theme.spacing(3) })}\n                        >\n                            <Grid container direction=\"row\" spacing={2}>\n                                <Grid\n                                    item\n                                    xs\n                                    css={theme => ({ padding: `0 ${theme.spacing(6)} !important` })}\n                                >\n                                    <InputField\n                                        value={searchQuery}\n                                        placeholder=\"Поиск ...\"\n                                        fullWidth\n                                        onChange={onSearchQueryChangeCallback}\n                                        css={({ colors, radius, spacing }) => ({\n                                            borderRadius: radius(5),\n                                            background: colors.white,\n                                            border: `1px solid ${colors.lightGray}`,\n                                            transition: \"border 0.25s ease-in-out\",\n                                            cursor: \"pointer\",\n                                            \":hover, :active\": {\n                                                border: `1px solid ${colors.primary}`,\n                                            },\n                                            div: {\n                                                \":before, :after\": { border: \"none !important\" },\n                                            },\n                                            input: { padding: `${spacing(2)} ${spacing(4)}` },\n                                        })}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <Grid item css={theme => ({ padding: theme.spacing(3) })}>\n                                <Table\n                                    page={page}\n                                    order={order}\n                                    orderBy={orderBy}\n                                    onRequestSort={onRequestSortCallback}\n                                    columns={columns}\n                                    renderMenuItems={renderMenuItems}\n                                    data={rows}\n                                    onRowClick={onRowClick}\n                                    onChangePage={onChangePage}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            )}\n        </SectionLayout>\n    );\n};\n\nexport default TemplateList;\n"],"sourceRoot":""}