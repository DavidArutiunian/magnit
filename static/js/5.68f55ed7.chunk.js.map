{"version":3,"sources":["components/section-layout/SectionLayout.tsx","components/section-title/SectionTitle.tsx","components/centered-section-item/CenteredGrid.tsx","components/list/EmptyList.tsx","containers/tasks/TaskHistory.tsx"],"names":["SectionLayout","props","children","rest","Grid","container","direction","css","width","minHeight","displayName","SectionTitle","title","item","height","boxShadow","Paper","square","display","alignItems","theme","paddingLeft","spacing","paddingRight","xs","Typography","variant","component","CenteredGrid","flexDirection","justifyContent","EmptyList","button","justify","alignContent","marginBottom","align","color","colors","black","fontWeight","fontSize","xLarge","secondary","larger","TaskHistory","taskId","useState","stages","setStages","focusedBlockId","setFocusedBlockId","context","useContext","AppContext","useEffect","getStagesWithFullHistory","courier","then","response","_","id","catch","console","error","length","maxWidth","maxTemplateWidth","margin","position","map","stage","index","onSelectableBlockFocus","last","key","padding","background","light","zIndex","focused","onMouseDown","onFocus","borderRadius","border","primary","finished","white","lightGray","top","left","textAlign","getFriendlyDate","Date","deadline","history","visibility","createdAt","description"],"mappings":"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","file":"static/js/5.68f55ed7.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const SectionLayout: React.FC<React.ComponentProps<typeof Grid>> = props => {\n    const { children, ...rest } = props;\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            css={{\n                width: \"100%\",\n                minHeight: \"100vh\",\n            }}\n            {...rest}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nSectionLayout.displayName = \"SectionLayout\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport * as React from \"react\";\n\ninterface ISectionTitleProps {\n    title: string;\n}\n\nexport const SectionTitle: React.FC<ISectionTitleProps> = ({ title, children }) => {\n    return (\n        <Grid\n            item\n            css={{\n                height: \"var(--section-title-height)\",\n                boxShadow: \"0 6px 20px rgba(220, 227, 235, 0.3)\",\n            }}\n        >\n            <Paper\n                square={true}\n                css={{\n                    height: \"100%\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    boxShadow: \"none !important\",\n                }}\n            >\n                <Grid\n                    container\n                    css={theme => ({\n                        paddingLeft: theme.spacing(4),\n                        paddingRight: theme.spacing(4),\n                    })}\n                >\n                    <Grid item xs>\n                        <Typography variant=\"h4\" component=\"div\">\n                            <span>{title}</span>\n                        </Typography>\n                    </Grid>\n                    {children}\n                </Grid>\n            </Paper>\n        </Grid>\n    );\n};\n\nSectionTitle.displayName = \"SectionTitle\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Grid } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport const CenteredGrid: React.FC<React.ComponentProps<typeof Grid>> = props => {\n    const { children, ...rest } = props;\n\n    return (\n        <Grid\n            item\n            xs\n            css={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n            {...rest}\n        >\n            {children}\n        </Grid>\n    );\n};\n\nCenteredGrid.displayName = \"CenteredSectionItem\";\n","/** @jsx jsx */\n\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { jsx } from \"@emotion/core\";\nimport { CenteredGrid } from \"components/centered-section-item\";\nimport * as React from \"react\";\n\ninterface IEmptyListProps {\n    title: string;\n    button?: React.ReactNode;\n}\n\nexport const EmptyList: React.FC<IEmptyListProps> = ({ title, button, children }) => {\n    return (\n        <CenteredGrid>\n            <Grid container justify=\"center\" alignContent=\"center\" direction=\"column\">\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.black,\n                            fontWeight: 500,\n                            fontSize: theme.fontSize.xLarge,\n                        })}\n                    >\n                        <span>{title}</span>\n                    </Typography>\n                </Grid>\n                <Grid item css={theme => ({ marginBottom: theme.spacing(3) })}>\n                    <Typography\n                        component=\"div\"\n                        align=\"center\"\n                        css={theme => ({\n                            color: theme.colors.secondary,\n                            fontSize: theme.colors.larger,\n                        })}\n                    >\n                        {children}\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Grid container justify=\"center\" alignContent=\"center\">\n                        <Grid item>{button}</Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </CenteredGrid>\n    );\n};\n\nEmptyList.displayName = \"EmptyList\";\n","/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { SelectableBlockWrapper } from \"@magnit/components\";\nimport { CheckIcon } from \"@magnit/icons\";\nimport { getFriendlyDate } from \"@magnit/services\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { EmptyList } from \"components/list\";\nimport { SectionLayout } from \"components/section-layout\";\nimport { SectionTitle } from \"components/section-title\";\nimport { AppContext } from \"context\";\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { getStagesWithFullHistory, IStageResponse } from \"services/api/tasks\";\n\nexport interface ITaskHistoryProps {\n    taskId: number;\n}\n\nconst TaskHistory: React.FC<ITaskHistoryProps> = ({ taskId }) => {\n    const [stages, setStages] = useState<IStageResponse[]>([]);\n    const [focusedBlockId, setFocusedBlockId] = useState(-1);\n    const context = useContext(AppContext);\n\n    useEffect(() => {\n        getStagesWithFullHistory(context.courier, taskId)\n            .then(response => {\n                setFocusedBlockId((_.last(response.stages) || { id: -1 }).id);\n                setStages(response.stages);\n            })\n            .catch(console.error);\n    }, [context.courier, taskId]);\n\n    return (\n        <SectionLayout>\n            <SectionTitle title=\"История изменений\" />\n            {!stages.length && <EmptyList title=\"Нет истории\" />}\n            <Grid\n                css={theme => ({\n                    maxWidth: theme.maxTemplateWidth,\n                    margin: theme.spacing(4),\n                    position: \"relative\",\n                })}\n            >\n                {stages.map((stage, index) => {\n                    function onSelectableBlockFocus(): void {\n                        setFocusedBlockId(stage.id);\n                    }\n\n                    const last = index === stages.length - 1;\n\n                    return (\n                        <SelectableBlockWrapper\n                            key={stage.id}\n                            css={theme => ({\n                                padding: `${theme.spacing(3)} ${theme.spacing(4)}`,\n                                \"&:hover\": {\n                                    background: theme.colors.light,\n                                    \"> div:last-child\": { background: theme.colors.light },\n                                },\n                                zIndex: focusedBlockId === stage.id ? 1300 : \"initial\",\n                            })}\n                            focused={focusedBlockId === stage.id}\n                            onMouseDown={onSelectableBlockFocus}\n                            onFocus={onSelectableBlockFocus}\n                        >\n                            <Grid container spacing={2} css={{ position: \"relative\" }}>\n                                <Grid item>\n                                    <Grid container justify=\"flex-end\">\n                                        <div\n                                            css={theme => ({\n                                                width: theme.spacing(3),\n                                                height: theme.spacing(3),\n                                                borderRadius: \"50%\",\n                                                border: `2px solid ${theme.colors.primary}`,\n                                                zIndex: 1500,\n                                                color: stage.finished\n                                                    ? theme.colors.white\n                                                    : \"initial\",\n                                                position: \"relative\",\n                                                background: stage.finished\n                                                    ? theme.colors.primary\n                                                    : theme.colors.white,\n                                            })}\n                                        >\n                                            {stage.finished && <CheckIcon />}\n                                        </div>\n                                        {!last && (\n                                            <div\n                                                css={theme => ({\n                                                    width: theme.spacing(0.25),\n                                                    height: `calc(100% + ${theme.spacing()})`,\n                                                    background: theme.colors.lightGray,\n                                                    position: \"absolute\",\n                                                    top: theme.spacing(4),\n                                                    left: \"20.5px\", // TODO: dynamic calculation\n                                                    zIndex: 1400,\n                                                })}\n                                            />\n                                        )}\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={7}>\n                                    <Typography\n                                        component=\"span\"\n                                        css={theme => ({ fontSize: theme.fontSize.larger })}\n                                    >\n                                        {stage.title}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <Typography\n                                        css={theme => ({\n                                            textAlign: \"end\",\n                                            color: theme.colors.secondary,\n                                        })}\n                                    >\n                                        {getFriendlyDate(new Date(stage.deadline))}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    {(stage.history || []).map(history => (\n                                        <Grid container spacing={3} key={history.id}>\n                                            <Grid item>\n                                                <div\n                                                    css={theme => ({\n                                                        width: theme.spacing(3),\n                                                        height: theme.spacing(3),\n                                                        visibility: \"hidden\",\n                                                    })}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={1}>\n                                                <Typography\n                                                    css={theme => ({\n                                                        textAlign: \"end\",\n                                                        color: theme.colors.secondary,\n                                                    })}\n                                                >\n                                                    {getFriendlyDate(new Date(history.createdAt))}\n                                                </Typography>\n                                            </Grid>\n                                            <Grid item xs={10}>\n                                                <Typography>{history.description}</Typography>\n                                            </Grid>\n                                        </Grid>\n                                    ))}\n                                </Grid>\n                            </Grid>\n                        </SelectableBlockWrapper>\n                    );\n                })}\n            </Grid>\n        </SectionLayout>\n    );\n};\n\nexport default TaskHistory;\n"],"sourceRoot":""}